// Generated by CoffeeScript 1.7.1
(function() {
  var Listener, Listeners, LiteLogShipper, LogConfig, Redis, Tail, argv, fs, glob, log, moment, os, redis, util, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  os = require("os");

  fs = require("fs");

  util = require('util');

  redis = require("redis");

  moment = require("moment");

  Tail = require("tail").Tail;

  _ = require("underscore");

  glob = require("glob");

  log = require('log4node');

  argv = require('optimist').argv;

  LogConfig = (function() {
    LogConfig.prototype.CONFIG_FILENAME = "/etc/log-shipper/log-shipper.json";

    function LogConfig() {
      this.reload();
      this.parseArgv();
    }

    LogConfig.prototype.parseArgv = function() {
      if (argv.debug || argv.v) {
        log.reconfigure({
          level: 'debug'
        });
        return log.debug("Debug mode on");
      }
    };

    LogConfig.prototype.reload = function() {
      var e;
      try {
        return this.config = JSON.parse(fs.readFileSync(this.CONFIG_FILENAME, 'utf8'));
      } catch (_error) {
        e = _error;
        throw new Error("Error loading config file");
      }
    };

    return LogConfig;

  })();

  Redis = (function() {
    function Redis(config) {
      var _ref;
      this.client = redis.createClient(config.redis.port, config.redis.host, {
        auth_pass: (_ref = config.redis.auth) != null ? _ref : null
      });
      this.client.on("error", function(error) {
        if (error.message.indexOf("ECONNREFUSED") > -1) {
          return log.error(error);
        } else {
          throw error;
        }
      });
      this.client.on("ready", function() {
        return log.info("Redis connection ready.");
      });
      this.client.on("end", (function(_this) {
        return function() {
          return log.error("Connection to Redis lost.");
        };
      })(this));
      this.config = config;
    }

    Redis.prototype.send = function(message, filename) {
      return this.client.rpush(this.config.redis.key, message, function() {
        return log.debug("Emit for: " + filename);
      });
    };

    Redis.prototype.quit = function() {
      return this.client.quit();
    };

    return Redis;

  })();

  Listeners = (function() {
    function Listeners() {
      this.listeners = [];
    }

    Listeners.prototype.add_listener = function(listener) {
      return this.listeners.push(listener);
    };

    Listeners.prototype.stop_all = function() {
      return _.each(this.listeners, function(listener, index, list) {
        return listener.stop();
      });
    };

    Listeners.prototype.clear = function() {
      return this.listeners = [];
    };

    return Listeners;

  })();

  Listener = (function() {
    function Listener(log_shipper, filename, file_object) {
      this.send = __bind(this.send, this);
      this.createLog = __bind(this.createLog, this);
      this.onLineEvent = __bind(this.onLineEvent, this);
      var e;
      this.config = log_shipper.log_config.config;
      this.hostname = log_shipper.hostname;
      this.filename = filename;
      this.file_object = file_object;
      this.redis_client = log_shipper.redis_client;
      try {
        this.tail = new Tail(filename);
        this.tail.on("line", this.onLineEvent);
      } catch (_error) {
        e = _error;
        log.error("Problem reading: " + filename);
        throw e;
      }
      log.info("Now watching: " + this.filename);
      return;
    }

    Listener.prototype.onLineEvent = function(newLine) {
      this.send(this.createLog(newLine));
    };

    Listener.prototype.createLog = function(message) {
      return JSON.stringify({
        "@timestamp": moment.utc().format(),
        "@version": 1,
        "host": this.hostname,
        "message": message,
        "path": this.filename,
        "type": this.file_object.type
      });
    };

    Listener.prototype.stop = function() {
      return this.tail.unwatch();
    };

    Listener.prototype.send = function(log_message) {
      return this.redis_client.send(log_message, this.filename);
    };

    return Listener;

  })();

  LiteLogShipper = (function() {
    function LiteLogShipper() {
      this.cleanUpAndExit = __bind(this.cleanUpAndExit, this);
      this.reloadConfig = __bind(this.reloadConfig, this);
      this.setupListeners = __bind(this.setupListeners, this);
      this.log_config = new LogConfig;
      this.redis_client = new Redis(this.log_config.config);
      this.listeners = new Listeners;
      this.hostname = os.hostname();
      log.info("Starting up");
      this.setupListeners();
      process.on('SIGINT', this.cleanUpAndExit);
      process.on('SIGTERM', this.cleanUpAndExit);
      process.on('SIGHUP', this.reloadConfig);
    }

    LiteLogShipper.prototype.setupListeners = function() {
      _.each(this.log_config.config.files, (function(_this) {
        return function(file_object) {
          _.each(file_object.paths, function(path) {
            glob(path, function(er, files) {
              _.each(files, function(path) {
                _this.listeners.add_listener(new Listener(_this, path, file_object));
              });
            });
          });
        };
      })(this));
    };

    LiteLogShipper.prototype.reloadConfig = function() {
      log.info("Config reload requested");
      log.info("Stopping all current listeners");
      this.listeners.stop_all();
      this.listeners.clear();
      log.info("All listeners stopped");
      log.info("Reloadig config");
      this.log_config.reload();
      log.info("Starting up listeners");
      return this.setupListeners();
    };

    LiteLogShipper.prototype.cleanUpAndExit = function() {
      log.info("Recieved shutdown signal, will close client...");
      this.redis_client.quit();
      log.info("Client closed");
      log.info("Shutting down");
      return process.exit();
    };

    return LiteLogShipper;

  })();

  new LiteLogShipper;

}).call(this);
